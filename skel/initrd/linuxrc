#!/bin/sh

MODULE_LIST="aes_generic aes-i586 aes loop crc-itu-t firewire-core \
    firewire-ohci firewire-sbp2"

MNT="/mnt"
CRYPT=""
LOOP=/dev/loop7

export MNT CRYPT LOOP


copy_usr()
{
    echo "Mounting $USRDEV..." 2>/dev/null
    mount -t auto $USRDEV $MNT >/dev/null 2>&1

    if [ $? -eq 0 ]; then
        echo "Copying /usr from $USRDEV into RAM..."

        dd if=$MNT/$USRFS of=/dev/ram2 bs=1024k || sh
        losetup /dev/loop0 /dev/ram2
        umount $MNT
    fi
}

mount_root()
{
    echo "Mounting $ROOTDEV..."
    mount -t auto $ROOTDEV $MNT

    if [ $? -ne 0 ]; then
        echo "Error mounting $ROOTDEV; ABENDing"
        exit
    fi

    if [ "$CRYPT" = "" ]; then
        echo "Copying rootfs from $ROOTDEV into RAM..."

        gzip -dc $MNT/$ROOTFS > /dev/ram1 || sh
        echo "0x0101" > /proc/sys/kernel/real-root-dev

    else
        echo "Copying alternate rootfs from $ROOTDEV into RAM..."

        dd if=$MNT/$ALTFS of=/dev/ram1 bs=1024k || sh
        losetup $CRYPT $LOOP /dev/ram1

        # circle back and load unencrypted root if password bad
        mount $LOOP $MNT

        if [ $? -ne 0 ]; then
            echo "U-Turn..."
            losetup -d $LOOP
            CRYPT=
            mount_root
        else
            echo "0x0707" > /proc/sys/kernel/real-root-dev
        fi
    fi

    umount $MNT

    #
    # if usrram
    # copy usr filesystem into /dev/ram2
    #
    if [ $USRRAM ]; then copy_usr; fi

    echo "Sprinkling with holy penguin pee...stand back"
    if [ $DEBUG ]; then sh; fi

    cd $MNT
    umount /proc
    umount /sys
    /sbin/pivot_root . initrd
    exec /sbin/chroot . /sbin/init 3

    # things are FUBAR if this point is reached; indulge
    echo "Aiiiiiiii!!" && sh
}

########################################################################
#
# execution begins here
#
########################################################################

echo
echo
echo "Entering initial ramdisk -- Low Clearance!!"
echo
echo
sleep 5

mount -t proc none /proc
mount -t sysfs none /sys

#
# load modules and pause for hardware recognition
#

for i in $MODULE_LIST; do
    if [ -f /lib/$i.ko ]; then insmod /lib/$i.ko 2>/dev/null; fi
done


echo "Tired, taking 5..."; sleep 5


#
# gather command line arguments
#

for ARG in `cat /proc/cmdline`; do
    case $ARG in

        # panic switch
        initshell)  DEBUG=1 ;;

        rootdev=*)  ROOTDEV=`echo $ARG| sed 's/^.*=//'` ;;
        rootfs=*)   ROOTFS=`echo $ARG| sed 's/^.*=//'` ;;

        usrdev=*)   USRDEV=`echo $ARG| sed 's/^.*=//'` ;;
        usrfs=*)    USRFS=`echo $ARG| sed 's/^.*=//'` ;;

        optdev=*)   OPTDEV=`echo $ARG| sed 's/^.*=//'` ;;
        optfs=*)    OPTFS=`echo $ARG| sed 's/^.*=//'` ;;

        localdev=*) LOCALDEV=`echo $ARG| sed 's/^.*=//'` ;;
        localfs=*)  LOCALFS=`echo $ARG| sed 's/^.*=//'` ;;

        altfs=*)    ALTFS=`echo $ARG| sed 's/^.*=//'`
                    CRYPT="-e aes"
                    busybox echo "Setting alternate rootfs"
                    ;;

        usrram)     USRRAM=1 ;;
        nousrram)   USRRAM=0 ;;
        
    esac
done


#
# if no rootdev=
# abort
#
if [ "$ROOTDEV" = "" ]; then
    echo "JayOS parm rootdev= not found, dropping into root shell"
    sh
    exit

# if no rootfs=
# set default path to root filesystem
#
elif [ "$ROOTFS" = "" ]; then
    ROOTFS="fs/root.gz"
fi

#
# if no usrdev=
# set device of usr filesystem to same as root filesystem
#
if [ "$USRDEV" = "" ]; then
    USRDEV=$ROOTDEV

# if no usrfs=
# set default path to usr filesystem
#
elif [ "$USRFS" = "" ]; then
    USRFS="fs/usr.fs"
fi

####
#### Goes in rootfs
####
####
#####
##### if no optdev=
##### set device of opt filesystem to same as root filesystem
#####
####if [ "$OPTDEV" = "" ]; then
####    OPTDEV=$ROOTDEV
####
##### if no optfs=
##### set default path to opt filesystem
#####
####elif [ "$OPTFS" = "" ]; then
####    OPTFS="fs/opt.fs"
####fi
####
#####
##### if no localdev=
##### set device of local filesystem to same as root filesystem
#####
####if [ "$LOCALDEV" = "" ]; then
####    LOCALDEV=$ROOTDEV
####
##### if no localfs=
##### set default path to local filesystem
#####
####elif [ "$LOCALFS" = "" ]; then
####    LOCALFS="fs/local.fs"
####fi

mount_root

